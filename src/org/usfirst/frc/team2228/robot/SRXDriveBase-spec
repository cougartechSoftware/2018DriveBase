DriveTrain object
six wheel tank drive with differental control(4 motor) using SRX ESC modules

- base motion control command -left/right level

- when object is created, it can configure in levels
	(all levels have stall protection software)
    1. sets motors up as master/follower for left/right side
	2. Cmdlevel as a percentage of the bus voltage
	3. All levels have stall protection software
	Sensor levels
	1. 1 with encoders
	2. feedback control(speed level command) which requires encoders
	2. 1 with encoders and heading angle modules (drive staight)
	3. 1 with encoders, heading angle module, and ultrasonic module (drive straight and perpendicular
	
issue: I am missing ultrasonic class
	   
- status/logging
====================================================================
-live window: 4 drives

-returns: position, speed, bus voltage, current, close loop error, rate, pitch, roll, yaw, distance left/right

-smartscreen: update by command
	position, speed, bus voltage, current, close loop error, rate, pitch, roll, yaw, distance left/right

-logging data: update by command
	date, position, speed, bus voltage, current, close loop error, yaw, distance
	   
-teleop commands: (base input- left/right command level)
================================================================

1. tank drive: power/speed level command (SetDriveTrainCmdLevel)
	******NOTE: THIS IS THE ONLY COMMAND NEEDED - all auto/tele commands can be done by user externally except
	            for magic motion and motion profiling
				
2. wpi chessy-throttle/turn: power command (WPISetThrottleTurn)

3. team 2228 chessy-throttle/turn: power/speed command(setThrottleTurn)
		+ drive straight assist (AHRS angle + drive straight correction factor)
		+ drive to wall perpendicular (ultrasonic + drive straight correction factor)
		
4. defense escape(reverse and turn robot 180 degrees left or right) TO DO

-autonomous commands:
==========================================================================
1 velMoveToPosition(double moveInches)
       move straight to position: power/speed/accel/ramp rate/coast distance - configured; distance by user
		NOTE: stopping is by coasting with regen braking on motors. If speed and ramp is used we
		      could get a shorter stopping distance

2. move perpendicular to stop: power/speed/accel ramp rate/coast distance+distance from wall - configured

3. rotate to angle: power/speed/accel ramp rate - configured; angle by user

4. turn to angle: power/speed/accel ramp rate - configured; angle by user

5. Motion Magic: user does calculations

6. Motion Magic move: drive base object does calculations

7. SRX profiling: TO DO

- testing commands
===================================================================
1. squarewave for determining PID parameters

2. AutoTuning using twiddle algorithm: TODO

3. driving straight for base drive straight correction factor
